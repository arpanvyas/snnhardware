I. Modular Hierarcy

	train_test_classify
		|--control
		|--pre_core 	: buffering, rfing, maxing, ips_generating
			|--win_freq	: part of rfing
			|--ips_generator: ips_generating
			|--maxer	: maxing
		|--core
			|--time_unit
			|--input_nu_blk
			|--output_nu_blk
		|--post_core

II. Flow of main tasks
	i. Training
	Tasks to be done on a training image:
		pre_core: 	
			i)buffering:	Taking the raw image and storing it in a buffer
			ii)rfing:	This contains both, applying a receptive field to the
					image and converting the value after receptive field 
					to time_period after which each input neuron will fire for that pixel.
			iii)maxing: 	Only used in training, this counts the number of spikes coming at each 
					TU in the input layer --> divides it by 3 --> Variable Threshold
					This variable_threshold is done for every new training image.
		coring: The task of training in input and output layer with weight change enabled


	ii. Testing
		In testing we provide single sample image for each of our class and with it provide
		a label which tells to which class this image belongs. This is because our whole 
		CORE module just clusters the images, unsupervised learning.
		
		pre_core:
			i)buffering: same as training
			ii)rf: same as training
		coring: the task of classification, weight change disabled
		post_core: Takes the training label and assigns the label to the neuron which fires 
			 the most for this training label. To find this most thing, a max finding 
			 unit is used.


	
	iii. Classification
		pre_core:		
			i)buffering: same as training
			ii)rf: same as training
		coring: same as testing
		post_core: Gives out the label set by tester for the input image, by finding
			 which op_nu spiked the most for that image.


	To coordinate pre_core, core and post_core, we use the "control" module.


III Flow of sub tasks
	Pre_core
	Core
	Decider

IV Image Flow
	To start with a new image, give impulse to "image_valid", "train_test_classify", 1st "image_valid" with "[31:0]image_in" comes from just the next cycle.
	To signal end, "valid_all" along with "image_label" (just for classify, rest only "valid_all")
	


	core:
	To start the core, "start_core_img", with "valid_ips" comes "ips",
	To signal end, "done_core_image"
